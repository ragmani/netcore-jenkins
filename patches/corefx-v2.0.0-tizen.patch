From d023d8d9a17cef0ad82a43e6747fc451ac279662 Mon Sep 17 00:00:00 2001
From: Hanjoung Lee <hanjoung.lee@samsung.com>
Date: Wed, 14 Jun 2017 16:38:06 +0900
Subject: [PATCH 1/6] [ARM/Tizen] Fix System.Globalization.Tests Failure

Fix #21038
---
 src/Common/tests/System/PlatformDetection.cs                            | 1 +
 src/System.Globalization/tests/NumberFormatInfo/NumberFormatInfoData.cs | 1 +
 2 files changed, 2 insertions(+)

diff --git a/src/Common/tests/System/PlatformDetection.cs b/src/Common/tests/System/PlatformDetection.cs
index 7df1d73..b561fab 100644
--- a/src/Common/tests/System/PlatformDetection.cs
+++ b/src/Common/tests/System/PlatformDetection.cs
@@ -187,6 +187,7 @@ namespace System
         public static bool IsDebian8 => IsDistroAndVersion("debian", "8");
         public static bool IsUbuntu1404 => IsDistroAndVersion("ubuntu", "14.04");
         public static bool IsCentos7 => IsDistroAndVersion("centos", "7");
+        public static bool IsTizen => IsDistroAndVersion("tizen");
 
         // If we need this long-term hopefully we can come up with a better detection than the kernel verison.
         public static bool IsMacOsHighSierra { get; } =
diff --git a/src/System.Globalization/tests/NumberFormatInfo/NumberFormatInfoData.cs b/src/System.Globalization/tests/NumberFormatInfo/NumberFormatInfoData.cs
index 7d0e383..de89807 100644
--- a/src/System.Globalization/tests/NumberFormatInfo/NumberFormatInfoData.cs
+++ b/src/System.Globalization/tests/NumberFormatInfo/NumberFormatInfoData.cs
@@ -17,6 +17,7 @@ namespace System.Globalization.Tests
                 || (PlatformDetection.IsUbuntu && !PlatformDetection.IsUbuntu1404)
                 || PlatformDetection.IsFedora
                 || (PlatformDetection.IsDebian && !PlatformDetection.IsDebian8)
+                || PlatformDetection.IsTizen
                )
             {
                 return new int[] { 3 };
-- 
1.9.1


From b18d1223214b38393f60d0969e68a991b65ac4a2 Mon Sep 17 00:00:00 2001
From: Yongseop Kim <yons.kim@samsung.com>
Date: Thu, 15 Jun 2017 12:06:55 +0900
Subject: [PATCH 2/6] Add code to care if sudo is not there on armel-rootfs

- https://github.com/dotnet/corefx/issues/21075
- add try/catch for catching a situation where there is no sudo
- return 1 if os is not specific os(ex. tizen) in setup-kdc.sh
---
 .../tests/FunctionalTests/NegotiateStreamTestForUnix.cs   | 15 ++++++++++++---
 src/System.Net.Security/tests/Scripts/Unix/setup-kdc.sh   |  2 ++
 2 files changed, 14 insertions(+), 3 deletions(-)

diff --git a/src/System.Net.Security/tests/FunctionalTests/NegotiateStreamTestForUnix.cs b/src/System.Net.Security/tests/FunctionalTests/NegotiateStreamTestForUnix.cs
index 3bd731e..71c9ab2 100644
--- a/src/System.Net.Security/tests/FunctionalTests/NegotiateStreamTestForUnix.cs
+++ b/src/System.Net.Security/tests/FunctionalTests/NegotiateStreamTestForUnix.cs
@@ -109,10 +109,19 @@ namespace System.Net.Security.Tests
             // the program to be run
             startInfo.FileName = SudoCommand;
             startInfo.Arguments = string.Format("bash {0} {1}", ScriptName, args);
-            using (Process kdcSetup = Process.Start(startInfo))
+
+            try
+            {
+                using (Process kdcSetup = Process.Start(startInfo))
+                {
+                    kdcSetup.WaitForExit();
+                    return kdcSetup.ExitCode;
+                }
+            }
+            catch
             {
-                kdcSetup.WaitForExit();
-                return kdcSetup.ExitCode;
+                // Could not find the file
+                return 1;
             }
         }
     }
diff --git a/src/System.Net.Security/tests/Scripts/Unix/setup-kdc.sh b/src/System.Net.Security/tests/Scripts/Unix/setup-kdc.sh
index c550416..3fe002a 100644
--- a/src/System.Net.Security/tests/Scripts/Unix/setup-kdc.sh
+++ b/src/System.Net.Security/tests/Scripts/Unix/setup-kdc.sh
@@ -66,6 +66,7 @@ clean_up()
             ;;
         *)
             echo "This is an unsupported operating system"
+            exit 1
             ;;
     esac
 
@@ -288,6 +289,7 @@ case ${OS} in
          ;;
     *)
         echo "This is an unsupported operating system"
+        exit 1
         ;;
 esac
 
-- 
1.9.1


From 25d79a8f543d82c39d3e179b7e15785dbeb077bc Mon Sep 17 00:00:00 2001
From: Hyung-Kyu Choi <hk0110.choi@samsung.com>
Date: Sat, 24 Jun 2017 00:25:58 +0900
Subject: [PATCH 3/6] Fix Ping.Unix.cs to handle various size of IPv4 header
 correctly

Size of IP header for IPv4 varies from 20 bytes to 60 bytes.

Signed-off-by: Hyung-Kyu Choi <hk0110.choi@samsung.com>
---
 src/System.Net.Ping/src/System.Net.Ping.csproj         |  2 +-
 .../src/System/Net/NetworkInformation/Ping.Unix.cs     | 18 +++++++++++++++---
 2 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/src/System.Net.Ping/src/System.Net.Ping.csproj b/src/System.Net.Ping/src/System.Net.Ping.csproj
index 4dc8b2c..3cb947b 100644
--- a/src/System.Net.Ping/src/System.Net.Ping.csproj
+++ b/src/System.Net.Ping/src/System.Net.Ping.csproj
@@ -153,4 +153,4 @@
     <Reference Include="System.IO.FileSystem" />
   </ItemGroup>
   <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
-</Project>
\ No newline at end of file
+</Project>
diff --git a/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs b/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs
index b2b3772..87ebdb0 100644
--- a/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs
+++ b/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs
@@ -16,7 +16,8 @@ namespace System.Net.NetworkInformation
     public partial class Ping
     {
         private const int IcmpHeaderLengthInBytes = 8;
-        private const int IpHeaderLengthInBytes = 20;
+        private const int MinIpHeaderLengthInBytes = 20;
+        private const int MaxIpHeaderLengthInBytes = 60;
         [ThreadStatic]
         private static Random t_idGenerator;
 
@@ -69,9 +70,9 @@ namespace System.Net.NetworkInformation
                 socket.SendTimeout = timeout;
                 // Setting Socket.DontFragment and .Ttl is not supported on Unix, so ignore the PingOptions parameter.
 
-                int ipHeaderLength = isIpv4 ? IpHeaderLengthInBytes : 0;
+                int ipHeaderLength = isIpv4 ? MinIpHeaderLengthInBytes : 0;
                 await socket.SendToAsync(new ArraySegment<byte>(sendBuffer), SocketFlags.None, endPoint).ConfigureAwait(false);
-                byte[] receiveBuffer = new byte[ipHeaderLength + IcmpHeaderLengthInBytes + buffer.Length];
+                byte[] receiveBuffer = new byte[MaxIpHeaderLengthInBytes + IcmpHeaderLengthInBytes + buffer.Length];
 
                 long elapsed;
                 Stopwatch sw = Stopwatch.StartNew();
@@ -105,6 +106,17 @@ namespace System.Net.NetworkInformation
                     {
                         fixed (byte* bytesPtr = &receiveBuffer[0])
                         {
+                            if (isIpv4)
+                            {
+                                // Determine actual size of IP header
+                                byte ihl = (byte)(bytesPtr[0] & 0x0f); // Internet Header Length
+                                ipHeaderLength = 4 * ihl;
+                                if (bytesReceived - ipHeaderLength < IcmpHeaderLengthInBytes)
+                                {
+                                    continue; // Not enough bytes to reconstruct actual IP header + ICMP header.
+                                }
+                            }
+
                             int icmpHeaderOffset = ipHeaderLength;
                             IcmpHeader receivedHeader = *((IcmpHeader*)(bytesPtr + icmpHeaderOffset)); // Skip IP header.
                             type = receivedHeader.Type;
-- 
1.9.1


From 424da043e0c370a80da3c208c8ec575a203033a2 Mon Sep 17 00:00:00 2001
From: Jonghyun Park <parjong@gmail.com>
Date: Mon, 26 Jun 2017 10:45:53 +0900
Subject: [PATCH 4/6] Set
 HAVE_SHM_OPEN_THAT_WORKS_WELL_ENOUGH_WITH_MMAP_EXITCODE as 1

---
 cross/armel/tryrun.cmake | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/cross/armel/tryrun.cmake b/cross/armel/tryrun.cmake
index aeaf7de..b979a93 100644
--- a/cross/armel/tryrun.cmake
+++ b/cross/armel/tryrun.cmake
@@ -1,5 +1,5 @@
 SET( HAVE_SHM_OPEN_THAT_WORKS_WELL_ENOUGH_WITH_MMAP_EXITCODE
-     0
+     1
      CACHE STRING "Result from TRY_RUN" FORCE)
 SET( HAVE_CLOCK_MONOTONIC_EXITCODE
      0
-- 
1.9.1


From 77b01b362713161f742dcb35762b20effc878012 Mon Sep 17 00:00:00 2001
From: Jonghyun Park <parjong@gmail.com>
Date: Tue, 27 Jun 2017 11:19:15 +0900
Subject: [PATCH 5/6] Use int.MaxValue / 2 (instead of int.MaxValue) as
 connection timeout

---
 src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.EasyRequest.cs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.EasyRequest.cs b/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.EasyRequest.cs
index 6b3dc18..3b03854 100644
--- a/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.EasyRequest.cs
+++ b/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.EasyRequest.cs
@@ -310,7 +310,7 @@ namespace System.Net.Http
             private void SetTimeouts()
             {
                 // Set timeout limit on the connect phase.
-                SetCurlOption(CURLoption.CURLOPT_CONNECTTIMEOUT_MS, int.MaxValue);
+                SetCurlOption(CURLoption.CURLOPT_CONNECTTIMEOUT_MS, int.MaxValue / 2);
 
                 // Override the default DNS cache timeout.  libcurl defaults to a 1 minute
                 // timeout, but we extend that to match the Windows timeout of 10 minutes.
-- 
1.9.1


From 9518589a189d755b62cf3116a5880769fb5e3038 Mon Sep 17 00:00:00 2001
From: "jiseob.jang" <jiseob.jang@samsung.com>
Date: Thu, 14 Sep 2017 14:12:40 +0900
Subject: [PATCH 6/6] Force O3 build with clang3.8.

---
 src/Native/Unix/CMakeLists.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/Native/Unix/CMakeLists.txt b/src/Native/Unix/CMakeLists.txt
index de8ae20..835b1be 100644
--- a/src/Native/Unix/CMakeLists.txt
+++ b/src/Native/Unix/CMakeLists.txt
@@ -90,9 +90,9 @@ if (UPPERCASE_CMAKE_BUILD_TYPE STREQUAL DEBUG)
       set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${CLR_SANITIZE_LINK_FLAGS} -Wl,--gc-sections")
     endif ()
 elseif (UPPERCASE_CMAKE_BUILD_TYPE STREQUAL RELEASE)
-    # Use O1 option when the clang version is smaller than 3.9
+    # Use O1 option when the clang version is smaller than 3.8
     # Otherwise use O3 option in release build
-    if (CMAKE_SYSTEM_PROCESSOR STREQUAL armv7l AND DEFINED ENV{CROSSCOMPILE} AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.9)
+    if (CMAKE_SYSTEM_PROCESSOR STREQUAL armv7l AND DEFINED ENV{CROSSCOMPILE} AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.8)
         add_compile_options (-O1)
     else()
         add_compile_options (-O3)
-- 
1.9.1

